#include <unistd.h>
void mx_printchar(char c){
        write(1,&c,1);
}
char mx_hyphen_plus(int h) {
    mx_printchar('+');
    for (int i = 0; i < h; i++) {
        mx_printchar('-');
    }    
    mx_printchar('+');
}
char mx_stroka(int h, int s) {
    mx_printchar('|');
        for (int i = 0; i < h; i++) {
            mx_printchar(' ');
        }    
    mx_printchar('|'); 
        for (int i = 0; i < s; i++) {
            mx_printchar(' ');
        }   
    mx_printchar('|');
} 
void mx_cube(int i) {
    if (i < 2) {
    }
    else {
    int n = i;                            
    int hyphen = n * 2;                 
    int slash = n / 2;                  
    int height = n + slash + 3;     
    int q =  height - 2*slash - 4; 
    // цей код супер складно читати, такшо звеняйте 
    for (int i = 0; i <= slash; i++) {
        mx_printchar(' ');
    }
    mx_hyphen_plus(hyphen);
    mx_printchar('\n');
        for (int i = slash; i > 0; i--) {
            for (int j = 0; j < i; j++) {    
                mx_printchar(' ');
            }
            mx_printchar('/');
            for (int k = 0; k < hyphen; k++) {
                mx_printchar(' ');
            }
            mx_printchar('/');
            int m = slash - i;
            for (int u = 0; u < m; u++) {
                mx_printchar(' ');
            }
            mx_printchar('|');
            mx_printchar('\n');
        }
    mx_hyphen_plus(hyphen); 
        for (int i = 0; i < slash; i++) {
            mx_printchar(' ');
        }
        mx_printchar('|');
        mx_printchar('\n'); 

    mx_printchar('|');
    for (int i = 0; i < hyphen; i++) {
        mx_printchar(' ');
    }
    mx_printchar('|');
    for (int i = 0; i < slash; i++) {
        mx_printchar(' ');
    }
    if (n == 2) {
        mx_printchar('+');
        mx_printchar('\n');
        mx_printchar('|');
        for (int i = 0; i < 4; i++) {
            mx_printchar(' '); 
        } 
        mx_printchar('|');
        mx_printchar('/');
        mx_printchar('\n');
        mx_hyphen_plus(hyphen);
        mx_printchar('\n');
    }
    else {
        mx_printchar('|');
        mx_printchar('\n');          
        for (int i = 1; i < q; i++) { 
            mx_stroka(hyphen,slash);
            mx_printchar('\n');
            }  
        mx_printchar('|');
        for (int i = 0; i < hyphen; i++) {
            mx_printchar(' ');
        }
        mx_printchar('|');
        for (int i = 0; i < slash; i++) {
            mx_printchar(' ');
        }
        mx_printchar('+');
        mx_printchar('\n');       
        for (int i = 0; i < slash; i++) {
            mx_printchar('|');
            for (int i = 0; i < hyphen; i++) {
                mx_printchar(' ');
            }
            mx_printchar('|');
            int r = slash - i;
            for (int i = 1; i < r; i++) {
                mx_printchar(' '); 
            }
            mx_printchar('/');
            mx_printchar('\n');
        }
        mx_hyphen_plus (hyphen);
        mx_printchar('\n');       
    }    
    }   
}               
int main () {
    mx_cube(10);
    return 0;
}   
